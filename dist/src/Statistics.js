export class Statistic {
    values;
    constructor(values) {
        this.values = values;
    }
    average() {
        return (this.values.reduce((sumt, cur) => sumt + cur, 0) / this.values.length);
    }
    averageHarm() {
        return (this.values.length /
            this.values.reduce((sumt, cur) => (sumt += 1 / cur), 0));
    }
    averageGeo() {
        return (this.values.reduce((acc, cur) => (acc *= cur), 1) **
            (1 / this.values.length));
    }
    variance() {
        const average = this.average();
        return (this.values.reduce((sumt, cur) => {
            return sumt + (cur - average) ** 2;
        }, 0) /
            (this.values.length - 1));
    }
    varianceGeo() {
        return this.stdDevGeo() ** 2;
    }
    stdDev() {
        return Math.sqrt(this.variance());
    }
    stdDevGeo() {
        const AG = this.averageGeo();
        let result = Math.sqrt(this.values.reduce((sumt, cur) => (sumt += (Math.log(cur) - Math.log(AG)) ** 2), 0) / this.values.length);
        if (!Number.isFinite(result))
            result = 0;
        return result;
    }
    median() {
        this.values = this.values.sort((a, b) => a - b);
        const middleIndex = Math.floor(this.values.length / 2);
        return this.values.length % 2 === 1
            ? this.values[middleIndex]
            : (this.values[middleIndex - 1] + this.values[middleIndex]) / 2;
    }
    mode() {
        const ocurrences = new Map();
        for (const value of this.values)
            ocurrences.set(value, (ocurrences.get(value) || 0) + 1);
        const numOcurrences = Array.from(ocurrences.entries()).map((entry) => entry[1]);
        const filteredOcurrences = Array.from(ocurrences.entries()).filter((entry) => {
            console.log(entry[1]);
            return numOcurrences.some((numOcurrence) => numOcurrence !== entry[1]);
        });
        console.log(numOcurrences);
        console.log(filteredOcurrences);
        let maxOcurrence = [0, 0];
        for (const [value, count] of filteredOcurrences)
            count > maxOcurrence[1] && (maxOcurrence = [value, count]);
        return !(maxOcurrence[1] === 0) ? maxOcurrence : "Não há moda definida";
    }
    cVar() {
        return this.stdDev() / this.average();
    }
    quartis() {
        this.values = this.values.sort((a, b) => a - b);
        const q1i = (this.values.length + 1) * 0.25;
        const q2i = this.median();
        const q3i = (this.values.length + 1) * 0.75;
        const q1 = this.values[Math.floor(q1i) - 1];
        const q2 = this.values[Math.floor(q2i) - 1];
        const q3 = this.values[Math.ceil(q3i) - 1];
        const iqr = q3 - q1;
        const lowWhisk = q1 - 1.5 * iqr;
        const upWhisk = q3 + 1.5 * iqr;
        return [
            [q1i, q1],
            [q2i, q2],
            [q3i, q3],
            [lowWhisk, this.values.filter((value) => value < lowWhisk)],
            [upWhisk, this.values.filter((value) => value > upWhisk)],
            iqr,
        ];
    }
    pearsonAssymetryIndex() {
        return (3 * (this.average() - this.median())) / this.stdDev();
    }
    testPearsonIndex(index) {
        if (index > 0)
            return "Assimétrica para a direita";
        else if (index === 0)
            return "Simétrica";
        else
            return "Assimétrica para a esquerda";
    }
    pearsonCorrelationIndex(x, y) {
        if (x.length === y.length) {
            x = x.sort((a, b) => a - b);
            y = y.sort((a, b) => a - b);
            const sumtX = x.reduce((sumt, cur) => (sumt += cur), 0);
            const sumtY = y.reduce((sumt, cur) => (sumt += cur), 0);
            return ((x.reduce((sumt, currentValue, i) => sumt + currentValue * y[i], 0) -
                (sumtX * sumtY) / x.length) /
                Math.sqrt((x.reduce((sumt, cur) => (sumt += cur ** 2), 0) -
                    sumtX ** 2 / x.length) *
                    (y.reduce((sumt, cur) => (sumt += cur ** 2), 0) -
                        sumtY ** 2 / x.length)));
        }
        else {
            console.error(`Erro no comprimento de conjuntos calculando o Índice de correlação de Pearson`);
            return `Conjuntos devem ter o mesmo comprimento!`;
        }
    }
    pearsonContg(x, n) {
        return Math.sqrt(x ** 2 / (x ** 2 + n));
    }
    curtosis() {
        this.values = this.values.sort((a, b) => a - b);
        const average = this.average();
        const stdDev4 = this.stdDev() ** 4;
        return (this.values.reduce((acc, cur) => acc + (cur - average) ** 4, 0) /
            this.values.length /
            stdDev4 -
            3);
    }
    intersect(A, B) {
        return A.filter((x) => B.includes(x));
    }
    union(A, B) {
        const union = [...A, ...B];
        const intersect = this.intersect(A, B);
        if (union.some((num) => intersect.includes(num))) {
            const indexIntersecNum = union.findIndex((num) => intersect.includes(num));
            union.splice(indexIntersecNum, 1);
        }
        return union;
    }
    probSimpleStr(e, t) {
        const eRep = t.reduce((acc, value) => {
            if (value === e)
                acc++;
            return acc;
        }, 0);
        return eRep / t.length;
    }
    probSimple(A, t) {
        return A / t;
    }
    probIntersect(A, B, t, dep = false, probCond) {
        if (dep) {
            return typeof probCond === "number"
                ? this.probSimpleStr(A, t) * this.probSimpleStr(B, t)
                : -1;
        }
        else
            return this.probSimpleStr(A, t) * this.probSimpleStr(B, t);
    }
    probCond(A, B, t) {
        return this.probIntersect(A, B, t) / this.probSimpleStr(B, t);
    }
    degreeQuiFrq(k) {
        return k - 1;
    }
    quiFreq(values) {
        return values.reduce((sumt, cur) => (sumt += (cur.ob - cur.exp) ** 2 / cur.exp), 0);
    }
    degreeQuiIndep(r, c) {
        return (r - 1) * (c - 1);
    }
    quiIndep(values) {
        let sumt = 0;
        for (let r = 0; r < values.length; r++) {
            for (let c = 0; c < values[r].cols; c++) {
                sumt +=
                    (values[r].obs[r][c] - values[r].exps[r][c]) ** 2 /
                        values[r].exps[r][c];
            }
        }
        return sumt;
    }
}
//# sourceMappingURL=data:application/json;base64,